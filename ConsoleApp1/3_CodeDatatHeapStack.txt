
2. 데이터 영역 4가지 : Code, Data, Heap, Stack

· Code 영역 : "컴파일 시점" 프로그램의 "실행코드"가 저장되는 영역

	작성 → 기계어 (어셈블리어 : 기계어와 1:1 매칭)

		∴ 이유 예시 : CPU 제조사 마다 다름 == CPU 연산하는 언어체계가 다름 == 인텔용, 암드용 컴파일이 필요할 것...
		→ 사용자 편의를 위해 사용

		중간 단위에서 언어를 바꿔주는 처리가 필요함
		MOV 작성하며, 운영체제가 알아서 인식할 수 있도록 하는 것

			.NET 
				다양한 어플리케이션을 빌드하기 위해 사용
				다양한 언어들이 존재
				GC 가비지 컬렉터

			CLR (common language runtime)는 가상 실행 시스템, .NET에서 실행
			
			1.C# 으로 작성된 소스코드는 컴파일시 중간언어로 바뀐다
				CLI (Common Language Infra)가 준수하는 중간 언어 (Intermediate Language) IL 언어로 컴파일된다.
				IL언어와 리소스는 일반적으로 .DLL 확장명과 함께 어셈블리에 저장된다.

			2. 컴파일된 C#, 실행하면 JIT 컴파일을 수행한다
				CLR은 (Just_In_Time)컴파일을 수행하여, IL 중간언어 → 네이티브 기계명령으로 변환된다.

· Data 영역 : 정적변수, 상수, 문자들이 처리되는 공간 
	정적변수는 프로그램이 시작될 때부터 메모리에 할달되며, 프로그램이 종료되는 때까지 유지된다.

	데이터 : 해당 프로그램들이 실행되는 데 값
	
	데이터들이 쌓여있는 저장공간 : SSD 하드디스크
	연산 등 처리하는 곳 : CPU 중앙처리장치

	ex. 게임들을 다운받았다고 하자 - LOL, MapleStory, LostArk, Ordin, BattleGround,....
	
	이 중에 LoL를 실행 시킨다면,
	데이터들을 하드디스크에서 읽고, CPU로 전달해야한다.
	매번 전체 검색하는 것은 비효율적이다.

	그래서 RAM을 사용한다.
	실행하려는 데이터만 복제해오는 것이다.

	메모리 RAM : 값을 저장하는 공간

	
