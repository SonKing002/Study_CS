1. Using 

	1_1. using: C# 의 키워드 중 하나 
		( 키워드 = C# 규격에 미리 정의 되어있는 특별한 단어 )
	
	1_2. System : C# 코드에 필요한 클래스를 담고 있는 네임스페이스 
		( using System; 네임스페이스 안에 있는 클래스를 사용하겠다고 컴파일러에게 알리는 역할 )
	
	1_3. 세미콜론 ;  문장이 끝났음을 알리는 기호
	
	1_4. using static System.Console; 
		// static : 정적 맴버를 데이터 형식의 이름을 명시하지 않고 참조하겠다 선언하는 기능
	
	1_5. global using : 프로젝트 내에서 모든 파일에 별도의 using 문 없이 네임스페이스를 참조가능
		전역using은 여러소스파일로 이루어지는 프로그램을 만들 때 유용하지만, 가독성과 재사용성 등에서 호불호가 존재한다.
		
2. Namespace 
	
	2_1. namespace 이름 { 코드블럭 }
		- 네임스페이스는 성격이나, 하는 일이 비슷한 클래스, 구조체, 인터페이스, 대리자, 열거 형식 들을
		  하나의 이름 아래에 묶는 일이다.

		- System.IO 네임스페이스 : 파일 입출력을 다루는 각종의 클래스, 구조체 대리자, 열거 형식 등 
		- System.Printing 네임스페이스 : 출력에 관련된 일을 하는 클래스 등 소속되어 있음

		- .NET 클래스 라이브러리에는 1만 개가 넘는 클래스가 있어도, 프로그래머가 혼돈을 느끼지 않고 클래스를 사용 할 수 있다.
		네임스페이스로 용도별/분야별 정리되어 있다.


	2_2. 한 개의 소스파일(cs)에 여러개의 네임스페이스를 가질 수 있다.
		
			namespace 네임스페이스_이름
			{
				//클래스
				//구조체
				//인터페이스 등...
			}

	2_3. 파일 범위 네임스페이스 선언방법 존재한다.
		
			namespace 네임스페이스_이름;
		

3. class MainApp { }
	
		3_1. 클래스 
			- C# 프로그램 (C#으로 작성된 프로그램)을 구성하는 기본 단위, 여러개 클래스로 구성되기도 한다.
			- 데이터와 데이터를 처리하는 기능 (: 메소드라고 부른다) 으로 이루어져 있다

		3_2 클래스 형태
			
			class 클래스_이름
			{
				
				//메서드
				static void Main(string[] args)
				{

				}
			}

4. static void Main(string[] args) {} 프로그램이 시작되는 곳

		4_1. 프로그램의 진입점으로, 프로그램을 시작하면 실행되고 이 메서드가 종료되면 프로그램도 역시 종료된다.
		따라서, 모든 프로그램은 반드시 Main 이라는 이름을 가진 메서드 하나를 가지고 있어야 한다.
			
			- ex. 
			class MainApp
			{
				static void Main(string[] args)
				{
					if(args.Length == 0)
					{
						Console.WriteLine("사용법 : Hello.exe <이름>");
						return;
					}

					WriteLine("Hello, {0}", args{0}); //프롬프트 출력
				}
			}

			- 메서드 : 다른 언어환경에서는 서브루틴, 함수 라고 불린다.

			- 메서드는 객체지향프로그래밍 세계에서 함수를 일컫는 말 
			( 객체 지향 프로그래밍에서는 모든 것이 객체로 존재하고, 함수는 객체의 일부이기 때문이다. )

		4_2 Main 메서드 키워드 
			
			static 한정자 + void 반환형식 + Main 메서드 이름 + (string[] args 매개변수)
			{
				//코드 블록;
			}

			- 한정자 : 메서드나 변수 등을 수식
				C# 프로그램의 각 요소는 코드가 실행되는 시점에 비로소 메모리가 할당된다.
				그러나, static 키워드로 수식되는 코드는 프로그램이 처음 구동될 때부터 메모리에 할당된다

				CLR : C#으로 만든 프로그램이 실행되는 환경
					이름이 Common Language Runtime인 이유 : 이 런타임이 C# 뿐 만 아니라,
					CLS ( Common Language Specification )규격을 따르는 모든 언어로 작성된 프로그램을 지원하기 때문이다.

				Main() 메서드가 static으로 수식되어 있지 않다면,
				진입점을 찾지 못했다는 에러 메세지를 남기고, 프로그램을 종료시킨다.

			- 메서드의 반환 형식 : void "비어있는" 뜻, 이 메서드가 어떤 결과도 돌려주지 않을 것을 컴파일러에게 알려주는 기능

			- 매개변수 : 프로그램을 실행할 때 입력하는 매개변수가 입력된다.

			- 코드블록 : 메소드가 실행도리 때 실행할 세부 코드를 담는다. 
				{ 여는 중괄호에서 메서드가 실행되고 
				} 닫는 중괄호에서 메서드 실행이 끝난다


5 CLR 에 대하여

		5_1. C#으로 만든 프로그램은 CLR 위에서 실행된다.
		
		5_2. 가상 머신
		
		5_3. 네이티브 코드로 작성된 프로그램들은 운영체제가 직접 실행할 수 있지만,
		
		- C# 컴파일러가 만든 실행프로그램은 하드웨어가 이해할 수 없는 코드로 구성되어 있기 때문에 실행할 수 없다.

		- C# 컴파일러는 C# 소스코드를 컴파일 해서 IL ( Intermediate Language ) 라는 중간 언어로 작성된 실행 파일을 만들어낸다.

		- 사용자가 이 파일을 실행 시키면 CLR 이 중간코드를 읽어들여 다시 하드웨어가 이해할 수 있는 네이티브 코드롤 컴파일한 후 실행한다.
		
		윗 줄을 바로 JIT ( just in time ) 컴파일이라고 부른다. 
		"적시 컴파일" JIT : 실행에 필요한 코드를 실행할 때마다 실시간으로 컴파일해서 실행한다는 뜻

		두번 컴파일 이유 : C# 뿐만 아니라 다른 언어도 지원하도록 설계되어있기 때문이다.
		다른 언어를 만나는 지점이 IL 중간 언어이다.

		5_4. 특징

			- 장점 : 플랫폼에 최적화된 코드르 만들어낸다는 점이다.
			- 단점 : 실행 시 이루어지는 컴파일의 비용의 부담

		5_5. GC : 가비지 컬렉터

		- 자동 메모리 관리를 해주는 기능으로 더 이상 사용하지 않는 메모리를 쓰레기로 간주하고, 수거하는 기능



